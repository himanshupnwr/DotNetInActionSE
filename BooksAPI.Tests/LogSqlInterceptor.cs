using Microsoft.EntityFrameworkCore.Diagnostics;
using System.Data.Common;
using Xunit.Abstractions;

namespace BooksAPI.Tests
{
    //An interceptor does what its name implies: intercepts the SQL generated by EF Core before it’s sent to the data store.
    public class LogSqlInterceptor : DbCommandInterceptor
    {
        private readonly ITestOutputHelper _testOutput;

        public LogSqlInterceptor(ITestOutputHelper testOutput) => _testOutput = testOutput;

        //ValueTask is used for async methods that are expected to perform synchronous work,
        //which makes sense in the interceptor case because the usual purpose is to manipulate the SQL
        public override ValueTask<InterceptionResult<DbDataReader>>ReaderExecutingAsync(
            DbCommand command, CommandEventData eventData, InterceptionResult<DbDataReader> result, CancellationToken cancelToken)
        {
            _testOutput.WriteLine(command.CommandText);
            return base.ReaderExecutingAsync(command, eventData, result, cancelToken);
        }
    }
}